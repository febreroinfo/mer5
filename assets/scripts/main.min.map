{"version":3,"sources":["skip.js","main.js","service.js"],"names":["simulateClick","element","eventOptions","window","MouseEvent","bubbles","cancelable","view","dispatchEvent","initialize","console","log","activateStickyScrollPadding","getContactEmail","getNetworkStatus","navItem","document","querySelector","navItemHeight","offsetHeight","documentElement","style","setProperty","navigator","serviceWorker","register","then","addEventListener","event","target","key","classList","contains","history","pushState","title","location","pathname","menu","getOverlay","overlayItem","getAttribute","setAttribute","previousElementSibling","textContent","contactItems","querySelectorAll","Array","from","forEach","contact","getContactEvent","id","emailData","replace","concat","removeAttribute","status","online","offline","updateNetworkStatus","onLine","setTimeout","firstFile","secondFile","fileKey","firstUpload","secondUpload","displayValidMessage","uploadControl","filename","validMessageExist","invalidMessageExist","validMessage","createElement","parentNode","appendChild","remove","displayInvalidMessage","invalidMessage","uniqueData","value","index","self","indexOf","getFileKeys","file","fileKeys","map","item","push","Object","keys","getKeyDropdown","flat","filter","uniqueKeys","keyList","list","label","comboBox","comboInput","comboButton","comboIcon","option","innerHTML","optionButton","mergeButton","getDynamicDropdown","removeKeyDropdown","keyDropdown","hasChildNodes","firstChild","removeChild","select","selectOptionStatus","selectOption","add","reader","FileReader","onload","JSON","parse","result","firstFilename","files","name","readAsText","secondFilename","mergeUpload","mergeFiles","secondArray","combinedArray","firstItem","_objectSpread","find","secondItem","displayPreview","stringify","undefined","exportToJSON","content","jsonArray","_typeof","exportData","blob","Blob","type","hyperlink","text","download","className","href","URL","createObjectURL","dataset","downloadURL","join","mergeClear","clearMerge","reset","children"],"mappings":"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","file":"main.min.js","sourcesContent":["// Simulate Click\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  const element = event.target;\r\n  //   console.log(element)\r\n  if (event.key === \"Enter\") {\r\n    if (element.classList.contains(\"skip\")) {\r\n      simulateClick(element);\r\n\r\n      if (history.pushState) {\r\n        history.pushState(\"\", document.title, window.location.pathname);\r\n      } else {\r\n        location = \"/\";\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nfunction simulateClick(element) {\r\n  // Create our event (with options)\r\n  const eventOptions = new window.MouseEvent(\"click\", {\r\n    bubbles: true,\r\n    cancelable: true,\r\n    view: window,\r\n  });\r\n  // If cancelled, don't dispatch our event\r\n  const cancelled = !element.dispatchEvent(eventOptions);\r\n\r\n  if (cancelled) {\r\n    // A handler called preventDefault.\r\n    // console.log('cancelled')\r\n  } else {\r\n    // None of the handlers called preventDefault.\r\n    // console.log('not cancelled')\r\n  }\r\n}","// Initialize\r\nwindow.addEventListener(\"load\", initialize);\r\n\r\nfunction initialize() {\r\n  console.log(\"Welcome! ðŸ‘‹\");\r\n  activateStickyScrollPadding();\r\n  getContactEmail();\r\n  getNetworkStatus();\r\n}\r\n\r\n// Scrolling\r\nfunction activateStickyScrollPadding() {\r\n  const navItem = document.querySelector(\".navbar\");\r\n  if (navItem) {\r\n    const navItemHeight = navItem.offsetHeight;\r\n\r\n    document.documentElement.style.setProperty(\r\n      \"--scroll-padding\",\r\n      `${navItemHeight}px`\r\n    );\r\n  }\r\n}\r\n\r\nlet menu = document.querySelector(\"button#menu\");\r\nif (menu) {\r\n  menu.addEventListener(\"click\", getOverlay);\r\n}\r\n\r\nfunction getOverlay() {\r\n  let overlayItem = document.querySelector(\"#info[data-open]\");\r\n\r\n  if (overlayItem.getAttribute(\"data-open\") == \"false\") {\r\n    overlayItem.setAttribute(\"data-open\", \"true\");\r\n    overlayItem.previousElementSibling.setAttribute(\"data-open\", \"false\");\r\n    menu.textContent = \"Close Info\";\r\n  } else {\r\n    overlayItem.setAttribute(\"data-open\", \"false\");\r\n    overlayItem.previousElementSibling.setAttribute(\"data-open\", \"true\");\r\n    menu.textContent = \"Info\";\r\n  }\r\n}\r\n\r\n// Email\r\nfunction getContactEmail() {\r\n  let contactItems = document.querySelectorAll(\"[data-email]\");\r\n  let contactArray = Array.from(contactItems);\r\n\r\n  contactArray.forEach((contact) => {\r\n    document.addEventListener(\"click\", (event) => {\r\n      getContactEvent(event);\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (event.key === \"Enter\") {\r\n        getContactEvent(event);\r\n      }\r\n    });\r\n\r\n    function getContactEvent(event) {\r\n      if (contact.id == event.target.id) {\r\n        let emailData = \"helloATfebreroDOTinfo\";\r\n        emailData = emailData.replace(/AT/, \"@\").replace(/DOT/, \".\");\r\n        contact.setAttribute(\"data-email\", \"true\");\r\n        contact.setAttribute(\"href\", `mailto:${emailData}`);\r\n      } else {\r\n        contact.setAttribute(\"data-email\", \"false\");\r\n        contact.removeAttribute(\"data-value\");\r\n        contact.removeAttribute(\"href\");\r\n        contact.removeAttribute(\"rel\");\r\n        contact.removeAttribute(\"target\");\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Network\r\nfunction getNetworkStatus() {\r\n  let status = document.querySelector(\"#status\");\r\n  let online = document.querySelector(\"#online\");\r\n  let offline = document.querySelector(\"#offline\");\r\n\r\n  function updateNetworkStatus() {\r\n    let condition = navigator.onLine ? \"online\" : \"offline\";\r\n\r\n    if (condition === \"offline\") {\r\n      status.setAttribute(\"data-open\", \"true\");\r\n      offline.setAttribute(\"data-open\", \"true\");\r\n      online.setAttribute(\"data-open\", \"false\");\r\n    } else {\r\n      status.setAttribute(\"data-open\", \"true\");\r\n      online.setAttribute(\"data-open\", \"true\");\r\n      offline.setAttribute(\"data-open\", \"false\");\r\n\r\n      setTimeout(() => {\r\n        online.setAttribute(\"data-open\", \"false\");\r\n        status.setAttribute(\"data-open\", \"false\");\r\n      }, 5800);\r\n    }\r\n  }\r\n\r\n  window.addEventListener(\"online\", updateNetworkStatus);\r\n  window.addEventListener(\"offline\", updateNetworkStatus);\r\n}\r\n\r\n// Merge\r\nconst firstUpload = document.querySelector(\"#firstFile\");\r\nlet firstFile;\r\nconst secondUpload = document.querySelector(\"#secondFile\");\r\nlet secondFile;\r\nlet fileKey;\r\n\r\nif (firstUpload) {\r\n  firstUpload.addEventListener(\"change\", (event) => {\r\n    // Based from https://stackoverflow.com/questions/23344776/how-to-access-data-of-uploaded-json-file\r\n    let reader = new FileReader();\r\n    removeKeyDropdown();\r\n\r\n    reader.onload = (event) => {\r\n      // Based from https://stackoverflow.com/questions/28850912/how-to-validate-json-data-in-javascript\r\n      try {\r\n        firstFile = JSON.parse(event.target.result);\r\n        let firstFilename = firstUpload.files[0].name;\r\n        // console.log(\"First File =>\", firstFile);\r\n\r\n        displayValidMessage(firstUpload, firstFilename);\r\n        getFileKeys(firstFile);\r\n\r\n        return firstFile;\r\n      } catch (event) {\r\n        displayInvalidMessage(firstUpload);\r\n      }\r\n    };\r\n\r\n    if (event.target.files[0]) {\r\n      reader.readAsText(event.target.files[0]);\r\n    }\r\n  });\r\n}\r\n\r\nif (secondUpload) {\r\n  secondUpload.addEventListener(\"change\", (event) => {\r\n    let reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      try {\r\n        secondFile = JSON.parse(event.target.result);\r\n        let secondFilename = secondUpload.files[0].name;\r\n        // console.log(\"Second File =>\", secondFile);\r\n\r\n        displayValidMessage(secondUpload, secondFilename);\r\n\r\n        return secondFile;\r\n      } catch (event) {\r\n        displayInvalidMessage(secondUpload);\r\n      }\r\n    };\r\n\r\n    if (event.target.files[0]) {\r\n      reader.readAsText(event.target.files[0]);\r\n    }\r\n  });\r\n}\r\n\r\n// Reset Input Message\r\nfunction displayValidMessage(uploadControl, filename) {\r\n  let validMessageExist = document.querySelector(\r\n    `#messageValid${uploadControl.id}`\r\n  );\r\n  let invalidMessageExist = document.querySelector(\r\n    `#messageInvalid${uploadControl.id}`\r\n  );\r\n\r\n  let validMessage = document.createElement(\"span\");\r\n  validMessage.setAttribute(\"id\", `messageValid${uploadControl.id}`);\r\n  validMessage.textContent = filename;\r\n  uploadControl.parentNode.appendChild(validMessage);\r\n\r\n  if (validMessageExist) {\r\n    validMessageExist.remove();\r\n  }\r\n\r\n  if (invalidMessageExist) {\r\n    invalidMessageExist.remove();\r\n  }\r\n}\r\n\r\nfunction displayInvalidMessage(uploadControl) {\r\n  let invalidMessageExist = document.querySelector(\r\n    `#messageInvalid${uploadControl.id}`\r\n  );\r\n  let validMessageExist = document.querySelector(\r\n    `#messageValid${uploadControl.id}`\r\n  );\r\n\r\n  let invalidMessage = document.createElement(\"span\");\r\n  invalidMessage.setAttribute(\"id\", `messageInvalid${uploadControl.id}`);\r\n  invalidMessage.textContent = \"Not a valid JSON file.\";\r\n  uploadControl.parentNode.appendChild(invalidMessage);\r\n\r\n  if (invalidMessageExist) {\r\n    invalidMessageExist.remove();\r\n  }\r\n\r\n  if (validMessageExist) {\r\n    validMessageExist.remove();\r\n  }\r\n}\r\n\r\n// Sort Unique Data\r\nfunction uniqueData(value, index, self) {\r\n  return self.indexOf(value) === index;\r\n}\r\n\r\nfunction getFileKeys(file) {\r\n  let fileKeys = [];\r\n  file.map((item) => {\r\n    fileKeys.push(Object.keys(item));\r\n  });\r\n\r\n  let keysFlatted = fileKeys.flat(1);\r\n  let uniqueKeys = keysFlatted.filter(uniqueData);\r\n  // console.log(\"Unique Keys =>\", uniqueKeys);\r\n\r\n  getKeyDropdown(uniqueKeys);\r\n}\r\n\r\nfunction getKeyDropdown(uniqueKeys) {\r\n  const keyList = document.querySelector(\"#fileKey\");\r\n\r\n  let list = document.createElement(\"div\");\r\n  list.setAttribute(\"class\", \"dropdown\");\r\n\r\n  let label = document.createElement(\"label\");\r\n  label.setAttribute(\"for\", \"text\");\r\n  label.textContent = \"Select Common Key of Files\";\r\n\r\n  let comboBox = document.createElement(\"div\");\r\n  comboBox.setAttribute(\"class\", \"dropdown__group\");\r\n\r\n  let comboInput = document.createElement(\"input\");\r\n  comboInput.setAttribute(\"id\", \"text\");\r\n  comboInput.setAttribute(\"type\", \"text\");\r\n  comboInput.setAttribute(\"readonly\", \"\");\r\n  comboInput.setAttribute(\"class\", \"dropdown__input\");\r\n  comboInput.setAttribute(\"placeholder\", \"Choose Key...\");\r\n\r\n  let comboButton = document.createElement(\"button\");\r\n  comboButton.setAttribute(\"id\", \"select\");\r\n  comboButton.setAttribute(\"type\", \"button\");\r\n  comboButton.setAttribute(\"class\", \"dropdown__button\");\r\n  comboButton.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n  let comboIcon = document.createElement(\"span\");\r\n  comboIcon.setAttribute(\"class\", \"dropdown__icon\");\r\n  comboIcon.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-chevron-down\"><polyline points=\"6 9 12 15 18 9\"/></svg>`;\r\n\r\n  let option = document.createElement(\"div\");\r\n  option.setAttribute(\"class\", \"dropdown__option\");\r\n  option.setAttribute(\"id\", \"selection\");\r\n\r\n  uniqueKeys.map((key) => {\r\n    let optionButton = document.createElement(\"button\");\r\n    optionButton.setAttribute(\"type\", \"button\");\r\n    optionButton.setAttribute(\"class\", \"dropdown__items\");\r\n    optionButton.setAttribute(\"value\", key);\r\n    optionButton.textContent = key;\r\n\r\n    option.appendChild(optionButton);\r\n\r\n    optionButton.addEventListener(\"click\", () => {\r\n      comboInput.value = optionButton.value;\r\n      fileKey = optionButton.value;\r\n\r\n      let mergeButton = document.querySelector(\"#fileMerge\");\r\n      let mergeButtonStatus = mergeButton.getAttribute(\"aria-hidden\");\r\n\r\n      if (mergeButtonStatus == false) {\r\n        mergeButton.setAttribute(\"aria-hidden\", \"true\");\r\n      } else {\r\n        mergeButton.setAttribute(\"aria-hidden\", \"false\");\r\n      }\r\n\r\n      return fileKey;\r\n    });\r\n  });\r\n  keyList.appendChild(list);\r\n\r\n  list.appendChild(label);\r\n  list.appendChild(comboBox);\r\n  comboBox.appendChild(comboInput);\r\n  comboBox.appendChild(comboButton);\r\n  comboButton.appendChild(comboIcon);\r\n  list.appendChild(option);\r\n\r\n  getDynamicDropdown();\r\n}\r\n\r\nfunction removeKeyDropdown() {\r\n  const keyDropdown = document.querySelector(\"#fileKey\");\r\n\r\n  if (keyDropdown && keyDropdown.hasChildNodes()) {\r\n    while (keyDropdown.firstChild) {\r\n      keyDropdown.removeChild(keyDropdown.firstChild);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDynamicDropdown() {\r\n  const select = document.querySelector(\"#select\");\r\n\r\n  if (select) {\r\n    document.addEventListener(\"click\", (event) => {\r\n      let selectOption = document.querySelector(\"#selection\");\r\n\r\n      if (selectOption) {\r\n        let selectOptionStatus = select.getAttribute(\"aria-expanded\");\r\n        if (event.target.id === select.id) {\r\n          if (selectOptionStatus === \"false\") {\r\n            select.setAttribute(\"aria-expanded\", \"true\");\r\n            selectOption.classList.add(\"is__active\");\r\n          } else {\r\n            select.setAttribute(\"aria-expanded\", \"false\");\r\n            selectOption.classList.remove(\"is__active\");\r\n          }\r\n        } else {\r\n          select.setAttribute(\"aria-expanded\", \"false\");\r\n          selectOption.classList.remove(\"is__active\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst mergeUpload = document.querySelector(\"#fileMerge\");\r\nif (mergeUpload) {\r\n  mergeUpload.addEventListener(\"click\", () => {\r\n    mergeFiles(firstFile, secondFile, fileKey);\r\n  });\r\n}\r\n\r\nfunction mergeFiles(firstFile, secondFile, fileKey) {\r\n  // Based on https://medium.com/ramsatt/how-to-merge-two-array-object-based-on-key-values-6562d982c1f4\r\n  // Based on https://stackoverflow.com/questions/38824349/how-to-convert-an-object-to-an-array-of-key-value-pairs-in-javascript\r\n  let combineArray = (firstArray, secondArray) =>\r\n    firstArray.map((firstItem) => ({\r\n      ...secondArray.find(\r\n        (secondItem) => secondItem[fileKey] === firstItem[fileKey] && secondItem\r\n      ),\r\n      ...firstItem,\r\n    }));\r\n  let combinedArray = combineArray(firstFile, secondFile);\r\n\r\n  displayPreview(JSON.stringify(combinedArray, undefined, 2));\r\n\r\n  let exportOutput = document.querySelector(\"#output\");\r\n  if (!exportOutput) {\r\n    exportToJSON(combinedArray);\r\n  }\r\n}\r\n\r\nfunction displayPreview(content) {\r\n  const preview = document.querySelector(\"#preview\");\r\n  preview.value = content;\r\n}\r\n\r\nfunction exportToJSON(jsonArray) {\r\n  let exportData = jsonArray;\r\n  let filename = \"mergedJSONarray.json\";\r\n\r\n  if (typeof exportData === \"object\") {\r\n    exportData = JSON.stringify(exportData, undefined, 4);\r\n    // console.log(\"Export Data =>\", exportData);\r\n  }\r\n\r\n  let blob = new Blob([exportData], { type: \"text/json\" }),\r\n    hyperlink = document.createElement(\"a\");\r\n\r\n  hyperlink.setAttribute(\"id\", \"output\");\r\n  hyperlink.text = \"Download Merged JSON\";\r\n  hyperlink.download = filename;\r\n  hyperlink.className = \"form__download\";\r\n  hyperlink.href = window.URL.createObjectURL(blob);\r\n  hyperlink.dataset.downloadURL = [\r\n    \"text/json\",\r\n    hyperlink.download,\r\n    hyperlink.href,\r\n  ].join(\":\");\r\n\r\n  let download = document.querySelector(\"#download\");\r\n  download.appendChild(hyperlink);\r\n}\r\n\r\nconst mergeClear = document.querySelector(\"#clear\");\r\nif (mergeClear) {\r\n  mergeClear.addEventListener(\"click\", () => {\r\n    clearMerge();\r\n  });\r\n}\r\n\r\nfunction clearMerge() {\r\n  const mergeForm = document.querySelector(\"#merge\");\r\n  mergeForm.reset();\r\n\r\n  const mergeFirstFile = document.querySelector(\"#firstFile\");\r\n  mergeFirstFile.parentNode.children[2].remove();\r\n\r\n  const mergeSecondFile = document.querySelector(\"#secondFile\");\r\n  mergeSecondFile.parentNode.children[2].remove();\r\n\r\n  removeKeyDropdown();\r\n\r\n  const mergeFile = document.querySelector(\"#fileMerge\");\r\n  mergeFile.setAttribute(\"aria-hidden\", \"true\");\r\n\r\n  const mergeDownload = document.querySelector(\"#download\");\r\n  mergeDownload.remove();\r\n}\r\n","// Check the browser to make sure it supports service workers\r\nif('serviceWorker' in navigator) {\r\n    navigator.serviceWorker\r\n    // Register the path to the service worker file\r\n    .register('./serviceWorker.js')\r\n    .then(function() {\r\n        console.log('Service Worker is Registered');\r\n    })\r\n}"]}